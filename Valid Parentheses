/*
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false

Example 4:
Input: s = "([])"
Output: true

Example 5:
Input: s = "([)]"
Output: false
*/

class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        stack = []
        mapping = {")": "(", "]": "[", "}": "{"}

        for char in s:
            if char in mapping.values():
                # add to stack if it is open bracket
                stack.append(char)
            elif char in mapping.keys():
                # when it is close bracket
                if not stack or mapping[char] != stack.pop():
                    # when stack is empty or not mapped, False
                    return False
            else:
                return False

        # check if stack is empty
        return not stack


#what I learned;
- Mapping is the process of creating a relationship between two sets of data. In programming,
it's often used to link keys to values, making it easy to look up information.


