Given a string s, return the longest palindromic substring in s.
Example 1:
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Example 2:
Input: s = "cbbd"
Output: "bb"
Constraints:

1 <= s.length <= 1000
///

class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if len(s) <= 1:
            return s
        
        # helper function: expansion from center
        def expand_from_center(left, right):
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
            return s[left + 1:right] # Returns a palindrome substring
        
        max_str = s[0] # Initialize the longest palindrome to the first character
        
        # Search for all possible centers
        for i in range(len(s) - 1):
            # odd length palindrome
            odd = expand_from_center(i, i)
            # even length palindrome
            even = expand_from_center(i, i + 1)
            
            # Update when longer palindromes are found
            if len(odd) > len(max_str):
                max_str = odd
            if len(even) > len(max_str):
                max_str = even
                
        return max_str
